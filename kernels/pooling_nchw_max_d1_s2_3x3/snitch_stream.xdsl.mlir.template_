riscv.assembly_section ".text" {
  riscv.directive ".globl" "pooling_nchw_max_d1_s2_3x3"
  riscv.directive ".p2align" "2"
riscv_func.func public @pooling_nchw_max_d1_s2_3x3(
    %X: !riscv.reg<a0>,
    %Y: !riscv.reg<a1>
) -> () {
    %X_moved = riscv.mv %X : (!riscv.reg<a0>) -> !riscv.reg
    %Y_moved = riscv.mv %Y : (!riscv.reg<a1>) -> !riscv.reg
    %cst = riscv.li -10000 : !riscv.reg
    %cst_1 = riscv.fcvt.d.w %cst : (!riscv.reg) -> !riscv.freg

    %c0 = riscv.li 0 : !riscv.reg
    %c1 = riscv.li 1 : !riscv.reg
    %c8 = riscv.li 8 : !riscv.reg
    %c16 = riscv.li 16 : !riscv.reg

    %h = riscv.li {{(M - 1) * 2 + 3 + 1}} : !riscv.reg
    %w = riscv.li {{(N - 1) * 2 + 3 + 1}} : !riscv.reg
    %new_h = riscv.li {{M}} : !riscv.reg
    %new_w = riscv.li {{N}} : !riscv.reg
    %x_stride = riscv.mul %w, %c16 : (!riscv.reg, !riscv.reg) -> !riscv.reg
    %y_stride = riscv.mul %new_w, %c8 : (!riscv.reg, !riscv.reg) -> !riscv.reg
    %tile_count = riscv.li {{N // 4}} : !riscv.reg

    riscv_scf.for %row : !riscv.reg = %c0 to %new_h step %c1 {
      %offset_x = riscv.mul %row, %x_stride : (!riscv.reg, !riscv.reg) -> !riscv.reg
      %offset_y = riscv.mul %row, %y_stride : (!riscv.reg, !riscv.reg) -> !riscv.reg
      %row_x = riscv.add %X_moved, %offset_x : (!riscv.reg, !riscv.reg) -> !riscv.reg
      %row_y = riscv.add %Y_moved, %offset_y : (!riscv.reg, !riscv.reg) -> !riscv.reg
      snitch_stream.streaming_region {
        patterns = [
          #snitch_stream.stride_pattern<ub = [{{N // 4}}, 3, 3, 4], strides = [64, {{((N - 1) * 2 + 3 + 1) * 8}}, 8, 16]>,
          #snitch_stream.stride_pattern<ub = [{{N}}], strides = [8]>
        ]
      } ins(%row_x : !riscv.reg) outs(%row_y : !riscv.reg) {
      ^0(%in : !stream.readable<!riscv.freg>, %0 : !stream.writable<!riscv.freg>):
        riscv_scf.for %5 : !riscv.reg = %c0 to %tile_count step %c1 {
          %6 = riscv.li 9 : !riscv.reg
          %7 = riscv.fmv.d %cst_1 : (!riscv.freg) -> !riscv.freg
          %8 = riscv.fmv.d %cst_1 : (!riscv.freg) -> !riscv.freg
          %9 = riscv.fmv.d %cst_1 : (!riscv.freg) -> !riscv.freg
          %10 = riscv.fmv.d %cst_1 : (!riscv.freg) -> !riscv.freg
          %11, %12, %13, %14 = riscv_scf.for %15 : !riscv.reg = %c0 to %6 step %c1 iter_args(%out = %7, %out_1 = %8, %out_2 = %9, %out_3 = %10) -> (!riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg) {
            %in_1 = riscv_snitch.read from %in : !riscv.freg
            %in_2 = riscv_snitch.read from %in : !riscv.freg
            %in_3 = riscv_snitch.read from %in : !riscv.freg
            %in_4 = riscv_snitch.read from %in : !riscv.freg
            %16 = riscv.fmax.d %out, %in_1 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
            %17 = riscv.fmax.d %out_1, %in_2 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
            %18 = riscv.fmax.d %out_2, %in_3 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
            %19 = riscv.fmax.d %out_3, %in_4 fastmath<fast> : (!riscv.freg, !riscv.freg) -> !riscv.freg
            riscv_scf.yield %16, %17, %18, %19 : !riscv.freg, !riscv.freg, !riscv.freg, !riscv.freg
          }
          %20 = riscv.fmv.d %11 : (!riscv.freg) -> !riscv.freg
          %21 = riscv.fmv.d %12 : (!riscv.freg) -> !riscv.freg
          %22 = riscv.fmv.d %13 : (!riscv.freg) -> !riscv.freg
          %23 = riscv.fmv.d %14 : (!riscv.freg) -> !riscv.freg
          riscv_snitch.write %20 to %0 : !riscv.freg
          riscv_snitch.write %21 to %0 : !riscv.freg
          riscv_snitch.write %22 to %0 : !riscv.freg
          riscv_snitch.write %23 to %0 : !riscv.freg
        }
      }
    }
    riscv_func.return
  }
}
