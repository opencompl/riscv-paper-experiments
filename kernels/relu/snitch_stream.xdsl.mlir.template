
  riscv.assembly_section ".text" {
    riscv.directive ".globl" "relu"
    riscv.directive ".p2align" "2"
    riscv_func.func @relu(%X : !riscv.reg<a0>, %Y : !riscv.reg<a1>) {
      %X_1 = riscv.mv %X : (!riscv.reg<a0>) -> !riscv.reg
      %Y_1 = riscv.mv %Y : (!riscv.reg<a1>) -> !riscv.reg
      %zero = riscv.get_register : !riscv.reg<zero>
      %zero_float = riscv.fcvt.d.w %zero : (!riscv.reg<zero>) -> !riscv.freg
      %zero_vector = riscv_snitch.vfcpka.s.s %zero_float, %zero_float : (!riscv.freg, !riscv.freg) -> !riscv.freg
      snitch_stream.streaming_region {
        patterns = [
          #snitch_stream.stride_pattern<ub = [{{M * N // 2}}], strides = [8]>
        ]
      } ins(%X_1 : !riscv.reg) outs(%Y_1 : !riscv.reg) {
      ^0(%x : !stream.readable<!riscv.freg<ft0>>, %0 : !stream.writable<!riscv.freg<ft1>>):
        %niter = riscv.li {{M * N // 2}} : !riscv.reg
        %c0 = riscv.li 0 : !riscv.reg
        %c1 = riscv.li 1 : !riscv.reg
        riscv_scf.for %i : !riscv.reg = %c0 to %niter step %c1 {
          %x_1 = riscv_snitch.read from %x : !riscv.freg<ft0>
          %y = riscv_snitch.vfmax.s %x_1, %zero_vector : (!riscv.freg<ft0>, !riscv.freg) -> !riscv.freg<ft1>
          riscv_snitch.write %y to %0 : !riscv.freg<ft1>
        }
      }
      riscv_func.return
    }
  }
