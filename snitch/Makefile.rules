
# vim: set ft=make:

.PHONY: traces, force_xdsl_commit, maybe_update_xdsl_commit

MAKEFILE_RULES_DIRNAME := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# NOTE: we are using  absolute paths from the Docker container
CC            = /opt/snitch-llvm/bin/riscv32-unknown-elf-clang
LD            = /opt/snitch-llvm/bin/riscv32-unknown-elf-clang
AR            = /opt/snitch-llvm/bin/llvm-ar
RANLIB        = /opt/snitch-llvm/bin/llvm-ranlib
VLTSIM        = /opt/snitch-rtl/bin/snitch_cluster.vlt
DASM          = /opt/snitch-spike/bin/spike-dasm
GENTRACE      = /opt/snitch_cluster/util/trace/gen_trace.py
MLIROPT       = mlir-opt-16
MLIRTRANSLATE = mlir-translate-16
XDSLOPT       = xdsl-opt

XDSL_DIR         = /src/xdsl
XDSL_COMMIT_FILE = /src/xdsl_commit.txt

# conversion scripts for maxif -> maximumf translation and vice verse:
TRANSLATE_MAXF_TO_MAXIMUMF=sed 's/arith.maxf/arith.maximumf/g'
TRANSLATE_MAXIMUMF_TO_MAXF=sed 's/arith.maximumf/arith.maxf/g'

# Get the current commit hash of xdsl
CURRENT_XDSL_COMMIT := $(shell git -C $(XDSL_DIR) rev-parse HEAD)

# Read the last recorded commit hash from a file, if it exists
LAST_XDSL_COMMIT := $(shell cat $(XDSL_COMMIT_FILE) 2>/dev/null)

# Rule to update the recorded commit hash in a file
maybe_update_xdsl_commit:
	@if [ "$(CURRENT_XDSL_COMMIT)" != "$(LAST_XDSL_COMMIT)" ]; then \
		echo $(CURRENT_XDSL_COMMIT) > $(XDSL_COMMIT_FILE); \
	fi

# Phony target to force re-reading xdsl commit
force_xdsl_commit:
	$(RM) $(SUBMODULE_COMMIT_FILE)

CFLAGS =
# Mixing .c and .ll files makes some flags, useful for the former,
# unused for the latter (e.g. -I)
CFLAGS += -Wno-unused-command-line-argument
# Common flags
CFLAGS += -I/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl/src
CFLAGS += -I/opt/snitch_cluster/target/snitch_cluster/sw/runtime/common
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/api
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/src
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/src/omp/
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/api/omp/
CFLAGS += -I/opt/snitch_cluster/sw/math/arch/riscv64/bits/
CFLAGS += -I/opt/snitch_cluster/sw/math/arch/generic
CFLAGS += -I/opt/snitch_cluster/sw/math/src/include
CFLAGS += -I/opt/snitch_cluster/sw/math/src/internal
CFLAGS += -I/opt/snitch_cluster/sw/math/include/bits
CFLAGS += -I/opt/snitch_cluster/sw/math/include
CFLAGS += -D__DEFINED_uint64_t
CFLAGS += -menable-experimental-extensions
CFLAGS += -mcpu=snitch
CFLAGS += -mabi=ilp32d
CFLAGS += -mcmodel=medany
CFLAGS += -ftls-model=local-exec
CFLAGS += -ffast-math
CFLAGS += -fno-builtin-printf
CFLAGS += -fno-common
CFLAGS += -O3

LDFLAGS =
LDFLAGS += -fuse-ld=/opt/snitch-llvm/bin/ld.lld
LDFLAGS += -L/opt/snitch-llvm/lib/clang/12.0.1/lib/
LDFLAGS += -T/opt/snitch_cluster/sw/snRuntime/base.ld
LDFLAGS += -L/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl
LDFLAGS += -L/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl/build
LDFLAGS += -nostartfiles
LDFLAGS += -nostdlib
LDFLAGS += -lclang_rt.builtins-riscv32
LDFLAGS += -lc
LDFLAGS += -lsnRuntime

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.ll.txt: %.c
	$(CC) $(CFLAGS) -S -emit-llvm -c $< -o $@

%.ll12: %.ll
	$(MAKEFILE_RULES_DIRNAME)/tollvm12.py < $< > $@

%.o: %.ll12
	$(CC) $(CFLAGS) -x ir -c $< -o $@

%.o: %.S
	$(CC) $(CFLAGS) -c $< -o $@

# XDSL

# commented passes are not in xdsl main yet

XDSLOPT_PASSES =
# XDSLOPT_PASSES += convert-linalg-to-stream
# XDSLOPT_PASSES += convert-stream-to-snitch-stream
XDSLOPT_PASSES += lower-affine
XDSLOPT_PASSES += convert-func-to-riscv-func
XDSLOPT_PASSES += convert-memref-to-riscv
XDSLOPT_PASSES += convert-arith-to-riscv
XDSLOPT_PASSES += convert-scf-to-riscv-scf
XDSLOPT_PASSES += dce
XDSLOPT_PASSES += reconcile-unrealized-casts
XDSLOPT_PASSES += test-lower-linalg-to-snitch


space := $(null) #
comma := ,
XDSLOPT_PASSES_LIST := $(subst $(space),$(comma),$(strip $(XDSLOPT_PASSES)))

XDSLOPTFLAGS =
XDSLOPTFLAGS = -p $(XDSLOPT_PASSES_LIST)
XDSLOPTFLAGS += -t riscv-asm

# Assembly rules

.PRECIOUS: %/linalg_xdsl.xdsl.mlir
%/linalg_xdsl.xdsl.mlir: %/linalg.mlir
	$(MLIROPT) $(MLIROPTFLAGS_XDSL) --mlir-print-local-scope -o $@ $<

.PRECIOUS: %/scf_xdsl.xdsl.mlir
%/scf_xdsl.xdsl.mlir: %/linalg.mlir
	$(MLIROPT) $(MLIROPTFLAGS_SCF_XDSL) --mlir-print-local-scope -o $@ $<

%.S: %.xdsl.mlir $(XDSL_COMMIT_FILE)
	$(TRANSLATE_MAXF_TO_MAXIMUMF) $< | $(XDSLOPT) $(XDSLOPTFLAGS) -o $@

# cd /src/xdsl; pwd; . ../venv/bin/activate; python -m docs.Toy.toy --emit=snitch-asm $(abspath $<) --ir > $(abspath $@)

%.S: %.c
	$(CC) $(CFLAGS) -S $< -o $@

%.S: %.S.txt
	cp $< $@

# MLIR

MLIROPTFLAGS_XDSL =
MLIROPTFLAGS_XDSL += -opaque-pointers=0
MLIROPTFLAGS_XDSL += --linalg-generalize-named-ops
MLIROPTFLAGS_XDSL += --eliminate-empty-tensors
MLIROPTFLAGS_XDSL += -empty-tensor-to-alloc-tensor
MLIROPTFLAGS_XDSL += --one-shot-bufferize='bufferize-function-boundaries function-boundary-type-conversion=identity-layout-map'
MLIROPTFLAGS_XDSL += --canonicalize

MLIROPTFLAGS_SCF_XDSL = $(MLIROPTFLAGS_XDSL)
MLIROPTFLAGS_SCF_XDSL += --convert-linalg-to-loops
MLIROPTFLAGS_SCF_XDSL += --lower-affine
MLIROPTFLAGS_SCF_XDSL += --canonicalize

MLIROPTFLAGS_PART1 = $(MLIROPTFLAGS_SCF_XDSL)

MLIROPTFLAGS =
MLIROPTFLAGS += --convert-scf-to-cf
MLIROPTFLAGS += --canonicalize
MLIROPTFLAGS += --cse
MLIROPTFLAGS += --convert-math-to-llvm
MLIROPTFLAGS += --convert-memref-to-llvm='use-generic-functions index-bitwidth=32'
MLIROPTFLAGS += --convert-func-to-llvm='use-bare-ptr-memref-call-conv index-bitwidth=32'
MLIROPTFLAGS += --convert-index-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-cf-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-arith-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --reconcile-unrealized-casts

%.part1.mlir: %.mlir
	$(MLIROPT) $(MLIROPTFLAGS_PART1) $< | $(TRANSLATE_MAXF_TO_MAXIMUMF) | $(XDSLOPT) -p arith-add-fastmath | $(TRANSLATE_MAXIMUMF_TO_MAXF) > $@

%.ll.mlir: %.part1.mlir
	$(MLIROPT) $(MLIROPTFLAGS) -o $@ $<

%.ll: %.ll.mlir
	$(MLIRTRANSLATE) -opaque-pointers=0 --mlir-to-llvmir -o $@ $<

# Universal rules

%/baseline.x: %/baseline.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/ssr.x: %/ssr.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/ssr1d.x: %/ssr1d.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/ssr2d.x: %/ssr2d.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/ssr_frep.x: %/ssr_frep.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/snrt.x: %/snrt.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/linalg.x: %/linalg.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/linalg_xdsl.x: %/linalg_xdsl.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/snitch_stream.x: %/snitch_stream.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/fused.x: %/fused.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/scf_xdsl.x: %/scf_xdsl.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/scf.x: %/scf.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)

%/riscv_scf.x: %/riscv_scf.o %/main.o %/data.o
	cd $(dir $<); $(LD) $(LDFLAGS) $(notdir $^) -o $(notdir $@)


# Trace rules

LOG_DIR = $<.logs

.PRECIOUS: %.logs/logs/trace_hart_00000000.dasm
%.logs/logs/trace_hart_00000000.dasm: %
	set -e; \
	rm -rf $(LOG_DIR) && mkdir -p $(LOG_DIR); \
	cd $(LOG_DIR); \
	$(VLTSIM) ../$(notdir $^); \
	cd --

%.trace.txt %.trace.json: %.dasm
	$(DASM) < $< | $(GENTRACE) --permissive -d $*.trace.json > $*.trace.txt

%.csv: %.x.logs/logs/trace_hart_00000000.trace.json
	grep -o '"cycles": [0-9]*' $< | cut -d " " -f 2 | sed -n '2p' > $@

define get_trace_targets
	$(addsuffix .trace.txt, $(basename $(shell find $(1) -name 'trace_hart_*.dasm')))
endef

traces: $(call get_trace_targets,.)
