
# vim: set ft=make:

.PHONY: traces

MAKEFILE_RULES_DIRNAME := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

# NOTE: we are using  absolute paths from the Docker container
CC            = /opt/snitch-llvm/bin/riscv32-unknown-elf-clang
LD            = /opt/snitch-llvm/bin/riscv32-unknown-elf-clang
AR            = /opt/snitch-llvm/bin/llvm-ar
RANLIB        = /opt/snitch-llvm/bin/llvm-ranlib
VLTSIM        = /opt/snitch-rtl/bin/snitch_cluster.vlt
DASM          = /opt/snitch-spike/bin/spike-dasm
GENTRACE      = /opt/snitch_cluster/util/trace/gen_trace.py
MLIROPT       = mlir-opt-16
MLIRTRANSLATE = mlir-translate-16
XDSLOPT       = xdsl-opt

CFLAGS =
# Mixing .c and .ll files makes some flags, useful for the former,
# unused for the latter (e.g. -I)
CFLAGS += -Wno-unused-command-line-argument
# Common flags
CFLAGS += -I/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl/src
CFLAGS += -I/opt/snitch_cluster/target/snitch_cluster/sw/runtime/common
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/api
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/src
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/src/omp/
CFLAGS += -I/opt/snitch_cluster/sw/snRuntime/api/omp/
CFLAGS += -I/opt/snitch_cluster/sw/math/arch/riscv64/bits/
CFLAGS += -I/opt/snitch_cluster/sw/math/arch/generic
CFLAGS += -I/opt/snitch_cluster/sw/math/src/include
CFLAGS += -I/opt/snitch_cluster/sw/math/src/internal
CFLAGS += -I/opt/snitch_cluster/sw/math/include/bits
CFLAGS += -I/opt/snitch_cluster/sw/math/include
CFLAGS += -D__DEFINED_uint64_t
CFLAGS += -menable-experimental-extensions
CFLAGS += -mcpu=snitch
CFLAGS += -mabi=ilp32d
CFLAGS += -mcmodel=medany
CFLAGS += -ftls-model=local-exec
CFLAGS += -ffast-math
CFLAGS += -fno-builtin-printf
CFLAGS += -fno-common
CFLAGS += -O3

LDFLAGS =
LDFLAGS += -fuse-ld=/opt/snitch-llvm/bin/ld.lld
LDFLAGS += -L/opt/snitch-llvm/lib/clang/12.0.1/lib/
LDFLAGS += -T/opt/snitch_cluster/sw/snRuntime/base.ld
LDFLAGS += -L/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl
LDFLAGS += -L/opt/snitch_cluster/target/snitch_cluster/sw/runtime/rtl/build
LDFLAGS += -nostartfiles
LDFLAGS += -nostdlib
LDFLAGS += -lclang_rt.builtins-riscv32
LDFLAGS += -lc
LDFLAGS += -lsnRuntime

%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

%.ll12: %.ll
	$(MAKEFILE_RULES_DIRNAME)/tollvm12.py < $< > $@

%.o: %.ll12
	$(CC) $(CFLAGS) -x ir -c $< -o $@

%.o: %.S
	$(CC) $(CFLAGS) -c $< -o $@

# XDSL

XDSLOPT_PASSES =
XDSLOPT_PASSES += convert-func-to-riscv-func
XDSLOPT_PASSES += convert-memref-to-riscv
XDSLOPT_PASSES += convert-arith-to-riscv
XDSLOPT_PASSES += convert-scf-to-riscv-scf
XDSLOPT_PASSES += dce
XDSLOPT_PASSES += reconcile-unrealized-casts
XDSLOPT_PASSES += canonicalize
XDSLOPT_PASSES += convert-snitch-stream-to-snitch
XDSLOPT_PASSES += lower-snitch
XDSLOPT_PASSES += canonicalize
XDSLOPT_PASSES += riscv-scf-loop-range-folding
XDSLOPT_PASSES += canonicalize
XDSLOPT_PASSES += riscv-reduce-register-pressure
XDSLOPT_PASSES += riscv-allocate-registers
XDSLOPT_PASSES += canonicalize
XDSLOPT_PASSES += lower-riscv-func
XDSLOPT_PASSES += lower-riscv-scf-to-labels

space := $(null) #
comma := ,
XDSLOPT_PASSES_LIST := $(subst $(space),$(comma),$(strip $(XDSLOPT_PASSES)))

XDSLOPTFLAGS =
XDSLOPTFLAGS = -p $(XDSLOPT_PASSES_LIST)
XDSLOPTFLAGS += -t riscv-asm

# Assembly rules

%.S: %.xdsl.mlir
	$(XDSLOPT) $(XDSLOPTFLAGS) $< -o $@

%.S: %.c
	$(CC) $(CFLAGS) -S $< -o $@

%.S: %.S.txt
	cp $< $@

# MLIR

MLIROPTFLAGS =
MLIROPTFLAGS += -opaque-pointers=0
MLIROPTFLAGS += --convert-linalg-to-loops
MLIROPTFLAGS += --convert-scf-to-cf
MLIROPTFLAGS += --canonicalize
MLIROPTFLAGS += --cse
MLIROPTFLAGS += --convert-math-to-llvm
MLIROPTFLAGS += --convert-memref-to-llvm='use-generic-functions index-bitwidth=32'
MLIROPTFLAGS += --convert-func-to-llvm='use-bare-ptr-memref-call-conv index-bitwidth=32'
MLIROPTFLAGS += --convert-index-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-cf-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --convert-arith-to-llvm=index-bitwidth=32
MLIROPTFLAGS += --reconcile-unrealized-casts

%.ll.mlir: %.mlir
	$(MLIROPT) $(MLIROPTFLAGS) -o $@ $<

%.ll: %.ll.mlir
	$(MLIRTRANSLATE) -opaque-pointers=0 --mlir-to-llvmir -o $@ $<

# Trace rules

sim_%: %.logs/trace_hart_00000000.dasm
	

.PRECIOUS: %.logs/trace_hart_00000000.dasm
%.logs/trace_hart_00000000.dasm: %
	rm -rf $(LOG_DIR) && mkdir -p $(LOG_DIR)
	cd $(LOG_DIR)
	$(VLTSIM) ../$<
	mv logs/* .
	rm -rf logs
	cd --

%.trace.txt %.trace.json: %.dasm
	$(DASM) < $< | $(GENTRACE) --permissive -d $*.trace.json > $*.trace.txt

define get_trace_targets
	$(addsuffix .trace.txt, $(basename $(shell find $(1) -name 'trace_hart_*.dasm')))
endef

traces: $(call get_trace_targets,.)
